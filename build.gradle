plugins {
    id "org.springframework.boot" version "2.5.9" apply false
    id "io.spring.dependency-management" version "1.0.11.RELEASE" apply false
    id 'org.unbroken-dome.test-sets' version '4.0.0' apply false
}

allprojects {
    group "com.amilosh"
    version "1.0.0"

    ext {
        checkstyleToolVersion = "8.41"
        mapStructVersion = "1.4.2.Final"
        springfoxSwaggerVersion = "3.0.0"
        lombokVersion = "1.18.22"
        lombokMapstructBindingVersion = "0.2.0"
        flywayVersion = "8.4.4"
        logbackJson = "0.1.5"
        pgEmbeddedVersion = "0.13.4"
    }

    configure(subprojects) {
        apply plugin: "java"
        apply plugin: 'checkstyle'
        apply plugin: 'jacoco'

        sourceCompatibility = JavaVersion.VERSION_15
        targetCompatibility = JavaVersion.VERSION_15

        repositories {
            mavenCentral()
        }

        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }

        dependencies {
            implementation "io.springfox:springfox-boot-starter:$springfoxSwaggerVersion"
            compileOnly "org.projectlombok:lombok:$lombokVersion"
            annotationProcessor "org.projectlombok:lombok:$lombokVersion"
            implementation "org.projectlombok:lombok-mapstruct-binding:$lombokMapstructBindingVersion"
            implementation "org.mapstruct:mapstruct:$mapStructVersion"
            annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
            testCompileOnly "org.projectlombok:lombok:$lombokVersion"
            testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        }

        checkstyle {
            toolVersion "$checkstyleToolVersion"
            configFile rootProject.file("config/checkstyle.xml")
        }

        jacoco {
            toolVersion = '0.8.7'
        }

        def execFiles = project.fileTree(project.buildDir).include("/jacoco/*.exec")
        def path = 'com/softeq/amilosh'
        def excludedTests = [
                path + '/controller/**',
                path + '/dto/**'
        ]

        jacocoTestReport.dependsOn test
        jacocoTestReport {
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude:
                            excludedTests
                    )
                }))
            }
        }

        // coverage verification task depends on jacocoTestReport
        jacocoTestCoverageVerification.dependsOn jacocoTestReport

        jacocoTestCoverageVerification {
            violationRules {
                rule {
                    limit {
                        counter = 'LINE'
                        minimum = 0.01
                    }
                }
            }
        }

        // if you want, 'check' task can depends on jacocoTestCoverageVerification
        check.dependsOn jacocoTestCoverageVerification
    }
}